package com.mygdx.game;

import java.util.Iterator;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.ScreenUtils;
import com.badlogic.gdx.utils.TimeUtils;

public class SolarPanelFallMain extends ApplicationAdapter {
	
	//Specific images we used in assets.
	private Texture photonImage;
	private Texture solarPanelImage;
	
	private SpriteBatch batch;
	private OrthographicCamera camera;
	private Rectangle solarPanel;
	private Array<Rectangle> photons;
	private long lastDropTime;
	
	@Override
	public void create () {
		
		//Import Images to be used in the game.
		photonImage = new Texture(Gdx.files.internal("PhotonScaled.png"));
		solarPanelImage = new Texture(Gdx.files.internal("SolarPanelScaled.png"));
		//TODO: Add sounds, sun in background. Start playback of music.
		
		camera = new OrthographicCamera();
		//Create "view" of game with 800*400 pixel resolution (objects are 64*64)
		camera.setToOrtho(false, 800, 480);
		batch = new SpriteBatch();
		
		//Create solar panel as a rectangle.
		solarPanel = new Rectangle();
		solarPanel.x = 800 / 2 - 64 / 2; 
		solarPanel.y = 20; 
		solarPanel.width = 64;
		solarPanel.height = 64;
		
		//Create photons falling.
		photons = new Array<Rectangle>();
		spawnPhoton();
		
		//TODO: Scoreboard, starting screen.
	}
	
	private void spawnPhoton() {
		Rectangle photon = new Rectangle();
		//Puts photon at random area on top of screen.
		photon.x = MathUtils.random(0, 800 - 64);
		photon.y = 480;
		photon.width = 64;
		photon.height = 64;
		photons.add(photon);
		lastDropTime = TimeUtils.nanoTime();
	}

	@Override
	public void render () {
		  // clear the screen with a dark blue color. The
	      // arguments to clear are the red, green
	      // blue and alpha component in the range [0,1]
	      // of the color to be used to clear the screen.
	      ScreenUtils.clear(0, 0, 0.2f, 1);

	      // tell the camera to update its matrices.
	      camera.update();

	      //Renders in coordinate system represented by Spritebatch.
	      batch.setProjectionMatrix(camera.combined);

	      //Start batch to draw the objects from images added.
	      batch.begin();
	      batch.draw(solarPanelImage, solarPanel.x, solarPanel.y);
	      for(Rectangle photon: photons) {
	         batch.draw(photonImage, photon.x, photon.y);
	      }
	      batch.end();

	      //Trackpad input instructions.
			if (Gdx.input.isTouched()) {
				Vector3 touchPos = new Vector3();
				touchPos.set(Gdx.input.getX(), Gdx.input.getY(), 0);
				camera.unproject(touchPos);
				solarPanel.x = touchPos.x - 64 / 2;
			}

	      //Make sure the solar panel stays on screen.
	      if(solarPanel.x < 0) solarPanel.x = 0;
	      if(solarPanel.x > 800 - 64) solarPanel.x = 800 - 64;

	      //Code to keep spawning photons.
	      if(TimeUtils.nanoTime() - lastDropTime > 1000000000) spawnPhoton();

			
	      //This block removes photons when they hit the solar panel
	      //TODO End game when photon gets past panel, scoreboard
	      for (Iterator<Rectangle> iter = photons.iterator(); iter.hasNext();) {
				Rectangle photon = iter.next();
				photon.y -= 200 * Gdx.graphics.getDeltaTime();
				if (photon.y + 64 < 0)
					iter.remove();
				if (photon.overlaps(solarPanel)) {
					iter.remove();
				}
			}
	          

	}
	
	@Override
	public void dispose () {
		  //Cleans up assets not needed on game exit.
	      photonImage.dispose();
	      solarPanelImage.dispose();
	      batch.dispose();
	}
}
